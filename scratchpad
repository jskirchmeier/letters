package jsk;


import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import static javax.swing.JFrame.EXIT_ON_CLOSE;

@SpringBootApplication
public class TypeMe extends JPanel
                    implements KeyListener, ActionListener {

    private String letter = "A";

    public TypeMe() {
        addKeyListener(this);
        setFocusable(true);

    }


    public static void main(String[] args) {
        ConfigurableApplicationContext ctx = new SpringApplicationBuilder(TypeMe.class)
                .headless(false).run(args);

        EventQueue.invokeLater(() -> {
            TypeMe ex = ctx.getBean(TypeMe.class);
            JFrame frame = new JFrame("Type Me");
            frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
            frame.setUndecorated(true);
            frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
            frame.add(ex);
            frame.setVisible(true);
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                                               RenderingHints.VALUE_ANTIALIAS_ON);

        rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        g2d.setRenderingHints(rh);

        g2d.setBackground(Color.BLACK);
        g2d.setColor(Color.BLACK);
        Rectangle bounds = g2d.getDeviceConfiguration().getBounds();
        g2d.fillRect(bounds.x, bounds.y, bounds.width, bounds.height);
        g2d.setColor(Color.BLUE);
        g2d.setFont(new Font("Cooper Black", Font.PLAIN, 400));
        g2d.drawString(this.letter, 300, 300);



    }

    @Override
    public void actionPerformed(ActionEvent e) {

    }

    @Override
    public void keyTyped(KeyEvent e) {
       System.out.printf("key typed %c %6d   shift %6b alt %6b  ctrl %6b\n",e.getKeyChar(),
                         e.getExtendedKeyCode(), e.isShiftDown(), e.isAltDown(), e.isControlDown());

        switch(e.getKeyChar()) {
            case 'a':
            case 'A':  this.letter = "A"; break;

            case 'b':
            case 'B':  this.letter = "B"; break;


            case '1':  this.letter = "1"; break;
            case '2':  this.letter = "2"; break;
            case '3':  this.letter = "3"; break;
        }
        this.repaint();

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if( e.getKeyCode() == KeyEvent.VK_Q && e.isControlDown() && e.isAltDown()) {
            System.out.println("ctrl-alt-Q pressed - exiting");
            System.exit(0);
        }

        //System.out.printf("key typed %6d %6d   alt %b  ctrl %b\n",e.getKeyCode(), e.getExtendedKeyCode(), e.isAltDown(), e.isControlDown());
        //System.out.println("keyPressed="+KeyEvent.getKeyText(e.getKeyCode()));

    }

    @Override
    public void keyReleased(KeyEvent e) {
        //System.out.println("keyReleased="+KeyEvent.getKeyText(e.getKeyCode()));

    }
}
